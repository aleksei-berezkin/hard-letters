const lesson0 = [
    // Transport & machines
    [1534685, '–ö—Ä–∞–Ω'],
    [2587571, '–†–æ–±–æ—Ç'],
    [2835381, '–ü–∞—Ä–æ–≤–æ–∑'],
    [7795790, '–ú–µ—Ç—Ä–æ'],
    [1080844, '–ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä'],
    [6631117, '–ö–æ—Ä–∞–±–ª—å'],
    [1578528, '–õ–∞–π–Ω–µ—Ä'],
    [180746, '–ü–∞—Ä—É—Å–Ω–∏–∫'],
    [3036620, '–¢—Ä–∞–º–≤–∞–π'],
    [3392100, '–ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å'],
    [6961339, '–ü–æ–∂–∞—Ä–Ω–∞—è –º–∞—à–∏–Ω–∞'],
    [534577, '–ì—Ä—É–∑–æ–≤–∏–∫'],
    [4655049, '–í–µ—Ä—Ç–æ–ª—ë—Ç'],
    [5279460, '–õ–µ—Ç–∞—é—â–∞—è —Ç–∞—Ä–µ–ª–∫–∞'],
    [3871893, '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä'],
    [7997980, '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ'],
    [7367963, '–í–µ—Ç—Ä—è–∫'],
    [4349830, '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è'],
    [7116299, '–ê—ç—Ä–æ–ø–æ—Ä—Ç'],
    [7432680, '–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∞–º–æ–ª–µ—Ç'],
    [1271919, '–ì–∞—Ä–∞–∂'],
    [4558069, '–ù–µ–±–æ—Å–∫—Ä—ë–±'],
    [4628308, '–ü–∞—Ä–∞—à—é—Ç'],
    [7385480, '–î–∏—Ä–∏–∂–∞–±–ª—å'],
    [4811563, '–ö–∞—Ä—É—Å–µ–ª—å'],
    // Nature & landscape
    [1453426, '–ì—Ä–æ–∑–∞'],
    [7224930, '–®—Ç–æ—Ä–º'],
    [2080138, '–ì–æ—Ä—ã'],
    [5129717, '–†–µ–∫–∞'],
    [4047523, '–†–∞–¥—É–≥–∞'],
    [2641195, '–ö–æ—Ä–æ–≤—ã'],
    [140589, '–§–µ—Ä–º–∞'],
    [1804481, '–ì–æ—Ä–æ–¥'],
    [6278825, '–û–∑–µ—Ä–æ'],
    [7660016, '–û—Å—Ç—Ä–æ–≤'],
    // Food
    [2664179, '–ü–∏—Ä–æ–≥'],
    [5417154, '–ß–µ—Ä–Ω–∏–∫–∞'],
    [1932375, '–ú–æ—Ä–æ–∂–µ–Ω–æ–µ'],
    [286192, '–¢–æ—Ä—Ç'],
    [7870491, '–ü–∏—Ä–æ–∂–Ω–æ–µ'],
    [8442168, '–û—Ä–µ—Ö–∏'],
    [87385, '–ö–∞—Ä—Ç–æ—à–∫–∞'],
    [2718477, '–ë—Ä–µ—Ü–µ–ª—å', '–ë—Ä—ç—Ü–µ–ª—å'],
    [685704, '–û–≥—É—Ä–µ—Ü'],
    [2282101, '–ü–æ–º–∏–¥–æ—Ä'],
    [1972744, '–°—ã—Ä'],
    // Art
    [3373844, '–ö–∞—Ä–∞–Ω–¥–∞—à–∏'],
    [7917562, '–†–∏—Å—É–Ω–æ–∫'],
    [911804, '–ö—Ä–∞—Å–∫–∏'],
    [5049980, '–ö–∞—Ä—Ç–∏–Ω–∞'],
    [1514254, '–û—Ä–∏–≥–∞–º–∏'],
    [1851248, '–ì–∏—Ç–∞—Ä–∞'],
    [4163321, '–ë–∞—Ä–∞–±–∞–Ω'],
]

const lesson1 = [
    [1975790, '–¢–∏–≥—Ä'],
    [2534995, '–•–æ—Ä—ë–∫'],
    [6871341, '–ó—É–±—Ä'],
    [7572734, '–ó–µ–±—Ä–∞'],
    [7312959, '–ñ–∏—Ä–∞—Ñ'],
]

const lessons = [lesson0, lesson1]

const animations = [
    'enlarge-animation',
    'reduce-animation',
    'slide-animation-x',
    'slide-animation-y',
]

const apiKey = '44310474-bd3c2d1e29e617c54c09f0b06'
const apiBase = 'https://pixabay.com/api/'

const mainImg = document.getElementById('main-img')
const descOverlay = document.getElementById('description-overlay')

export async function runLesson(lessonId) {
    const lesson = lessons[lessonId]
    shuffleArray(lesson);
    shuffleArray(animations);
    for (let i = 0; i < lesson.length; i++){
        const [picId, picDesc, picDescSpoken] = lesson[i];
        const animation = animations[i % animations.length]

        const res = await fetch(
            `${apiBase}?key=${apiKey}&id=${picId}`,
            {
                method: 'GET',
                headers: {
                    // 'Cache-Control': 'max-age=86400'
                }
            }
        )
        const j = await res.json()
        const imgUrl = j['hits'][0]['largeImageURL']
        mainImg.src = imgUrl

        await new Promise(resolve => mainImg.onload = resolve)
        mainImg.className = animation
        document.body.style.backgroundImage = `url(${imgUrl})`
        descOverlay.innerHTML = picDesc

        const toSpeak = picDescSpoken ?? picDesc
        speak(toSpeak)

        const wordsCount = toSpeak.split(/[- ]/).length

        await delay(5000 + wordsCount * 1000)
    }

    speak('–ú–æ–ª–æ–¥–µ—Ü')
    descOverlay.innerHTML = 'üëç'
}


function delay(timeoutMs) {
    return new Promise(resolve => setTimeout(resolve, timeoutMs))
}

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

function speak(text) {
    const isWin = navigator.userAgent.toLowerCase().includes('win')

    const msg = new SpeechSynthesisUtterance(text);
    msg.lang = 'ru-RU';            // Language
    msg.pitch = isWin ? 1.1 : 1;   // Pitch (0 to 2)
    msg.rate = isWin ? .85 : .55;  // Rate (0.1 to 10)
    msg.volume = 1;                // Volume (0 to 1)
    window.speechSynthesis.speak(msg);
}
